REST API Reference

Endpoint: http://127.0.0.1:3000/


/********************************  공통  ***********************************/

01.osVer                   :   Text =>    iOS, Android
02.appVer                  :   Text =>    1.001 ...


/********************************  찾기  ***********************************/

/* POST : 관리자 공지사항 찾기 */
/managerNoticeSearch
    Req.Body.Parameter
        01.division                   :   Text =>     division : 일반 : 0 , 사업자 : 1


/* POST : 식당 찾기 */
/restaurantSearch
    Req.Body.Parameter
        01.searchText                :   Text =>     검색어 (주소 & 상호)


/* POST : 식당 인증 & 공지사항 */
/restaurantInfo
    Req.Body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)


/* POST : 식단 조회 */
/mealSearch
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.segmentedId               :   Text =>     오늘 식단(0):오늘 만   
                                                     계회 식단(1):오늘 이후  
                                                     과거 식단(2):오늘 이전 

/* POST : 식당 항목(Group) 조회 */
/restaurantGroup
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.group                     :   Text =>     '' :  전체 목록 
                                                     -location     : 구내식당,학생식당 등 
                                                     -division     : 사진식단,('아침', '점심', '저녁')이 포함함
                                                     -stapleFood   : 주식(밥,면)
                                                     -soup         : 국
                                                     -sideDish     : 반찬
                                                     -dessert      : 없음(필수) 후식


/* POST : 로그인 */
/restaurantLogin
    Req.body.Parameter
        01.id                       :   Text =>     id(사용자 입력 ID)
        02.password                 :   Text =>     패스워스(hash: sha-256 digest(Hex)


/* POST : 회원 정보 조회 */
/restaurantMember
    Req.body.Parameter
        01.restaurant_Id            :   Text =>     _id(Restaurant Oid)


/* POST : 식단 맛있어요 카운터  */
/mealLikeCount
    Req.body.Parameter
        01.meal_Id                   :   Text =>     _id(Meal Oid)
        02.uniqueId                  :   Text =>     휴대전화 고유UUid


/* POST :  문의 또는 식당요청 게시판 조회*/
/boardSearch
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(restaurant_Id)
        02.uniqueId                  :   Text =>     휴대전화 고유UUid


/* POST : 식단 등록 카운터를 이용한 전면 배너 광고 처리  */
/mealBannerCheck
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(restaurant_Id)


/* POST :  보안 정보 확인 Test */
/securityTest
    Req.body.Parameter
        01.type                     :   Text =>     보안 유형
        02.text                     :   Text =>     Text


/********************************  등록  ***********************************/

/* POST : 회원 가입 */
/restaurantSignUp
    Req.Body.Parameter
        01.id                        :   Text =>     id(사용자 입력 ID)
        02.password                  :   Text =>     비밀번호(hash: sha-256 digest(Hex)
        03.businessNumber            :   Text =>     사업자 번호
        04.companyName               :   Text =>     상호
        05.address                   :   Text =>     주소
        06.contactNumber             :   Text =>     연락처
        07.representative            :   Text =>     대표자
        08.businessLicenseImage      :   File =>     사업자 등록증 사진 (600 x 600 사이즈)
      =>certification   : 서버에서 처리 'n'
      =>notice          : 서버에서 처리 '공지사항'



/* POST : 식단 등록 */
/mealWrite
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.mealDate                  :   Text =>     날짜
        03.location                  :   Text =>     위치(기본으로 구내식당, 추후 : 교직원 식당, 학생 식당 등으로 사용)
        04.division                  :   Text =>     구분(기본으로 아침,점심,저녁 / 아침-정식, 아침-간편식 등으로 사용 
                                                    / 문자열 '아침,점심,저녁' 을 이용하여 sort필드는 서버에서 처리  )
        05.stapleFood1               :   Text =>     주식(밥,면)1
        06.soup1                     :   Text =>     국2
        07.sideDish1                 :   Text =>     반찬1
        08.sideDish2                 :   Text =>     반찬2
        09.sideDish3                 :   Text =>     반찬3
        10.sideDish4                 :   Text =>     반찬4
        11.sideDish5                 :   Text =>     반찬5
        12.sideDish6                 :   Text =>     반찬6
        13.sideDish7                 :   Text =>     반찬7
        14.dessert1                  :   Text =>     후식1
        15.dessert2                  :   Text =>     후식2
        16.dessert3                  :   Text =>     후식3
        17.remarks                   :   Text =>     비고
        18.foodImage                 :   File =>     사진 (600 x 600 사이즈)
      =>mealDateLabel   : 날짜 기준으로 서버에서 처리
      =>sort            : division의 문자열 중 '아침,점심,저녁' 을 이용하여 서버에서 처리
      =>like            : Number(기본 : 0)


/* POST : 식당 항목(Group) 추가  */
/restaurantGroupAdd
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.group                     :   Text =>     location,division,stapleFood,soup,sideDish,dessert
        03.text                      :   Text =>     입력 값
                                                     -location     : 구내식당,학생식당 등 
                                                     -division     : 사진식단,('아침', '점심', '저녁')이 포함함
                                                     -stapleFood   : 주식(밥,면)
                                                     -soup         : 국
                                                     -sideDish     : 반찬
                                                     -dessert      : 없음(필수) 후식
                                                     *클라이언트에서 중복을 Check해서 전송한다.


/* POST :  문의 또는 식당요청 게시판 */
/boardWrite
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.uniqueId                  :   Text =>     휴대전화 고유UUid
        03.division                  :   Text =>     식당 요청 : 0, 문의 : 1
        04.title                     :   Text =>     제목
        05.contents                  :   Text =>     문의 / 식당 요청 내용



/* POST :  문의 또는 식당요청 게시판 */
/boardWrite
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.uniqueId                  :   Text =>     휴대전화 고유UUid
        03.division                  :   Text =>     식당 요청 : 0, 문의 : 1
        04.title                     :   Text =>     제목
        05.contents                  :   Text =>     문의 / 식당 요청 내용



/* POST :  보안 정보 등록 */
/securityWrite
    Req.body.Parameter
        01.type                     :   Text =>     보안 유형
        02.text                     :   Text =>     Text


/* POST :  전체 Model 생성 (최초 환경 설정 시 사용)*/
/allModelCreate


/********************************  수정  ***********************************/

/* POST : 회원 수정  : Android 와 공용으로 put -> Post로 변경 */
/restaurantEdit
    Req.Body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.password                  :   Text =>     비밀번호(hash: sha-256 digest(Hex)
                                                     암호를 수정하고자 할때(별도 인증 없음)
        03.businessNumber            :   Text =>     사업자 번호
        04.companyName               :   Text =>     상호
        05.address                   :   Text =>     주소
        06.contactNumber             :   Text =>     연락처
        07.representative            :   Text =>     대표자
        08.editImage                 :   Text =>     기본 이미지 : "NoImageFound.jpg" 가 들어오면 기존 이미지 삭제
                                                     *기존에 이미지가 등록되어 있는 경루 "NoImageFound.jpg" 시 파일 삭제 처리
        09.businessLicenseImage      :   File =>     사업자 등록증 사진 (600 x 600 사이즈)
      =>id              : 변경 불가
      =>certification   : 서버에서 처리 'n'
      =>notice          : 서버에서 처리 '공지사항'


/* POST : 식단 수정 : Android 와 공용으로 put -> Post로 변경 */
/mealEdit
    Req.body.Parameter
        01.meal_Id                   :   Text =>     _id(Meal Oid)
        02.mealDate                  :   Text =>     날짜
        03.location                  :   Text =>     위치(기본으로 구내식당, 추후 : 교직원 식당, 학생 식당 등으로 사용)
        04.division                  :   Text =>     구분(기본으로 아침,점심,저녁 / 아침-정식, 아침-간편식 등으로 사용 
                                                     *문자열 '아침,점심,저녁' 을 이용하여 sort필드는 서버에서 처리  )
        05.stapleFood1               :   Text =>     주식(밥,면)1
        06.soup1                     :   Text =>     국1
        07.sideDish1                 :   Text =>     반찬1
        08.sideDish2                 :   Text =>     반찬2
        09.sideDish3                 :   Text =>     반찬3
        10.sideDish4                 :   Text =>     반찬4
        11.sideDish5                 :   Text =>     반찬5
        12.sideDish6                 :   Text =>     반찬6
        13.sideDish7                 :   Text =>     반찬7
        14.dessert1                  :   Text =>     후식1
        15.dessert2                  :   Text =>     후식2
        16.dessert3                  :   Text =>     후식3
        17.remarks                   :   Text =>     비고
        18.editImage                 :   Text =>     기본 이미지 : "NoImageFound.jpg" 가 들어오면 기존 이미지 삭제
                                                     *기존에 이미지가 등록되어 있는 경루 "NoImageFound.jpg" 시 파일 삭제 처리
        19.foodImage                 :   File =>     사진 (600 x 600 사이즈)
      =>mealDateLabel   : 날짜 기준으로 서버에서 처리
      =>sort            : division의 문자열 중 '아침,점심,저녁' 을 이용하여 서버에서 처리


/* PUT : 식당 공지사항 수정 */
/restaurantNoticeEdit
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.notice                    :   Text =>     공지사항


/* PUT : 식단 맛있어요 설정/해제 */
/mealLike
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(restaurant_Id Oid)
        02.meal_Id                   :   Text =>     _id(Meal Oid)
        03.uniqueId                  :   Text =>     휴대전화 고유UUid



/* POST :  문의 또는 식당요청 게시판 수정 */
/boardEdit
    Req.body.Parameter
        01.Board_Id                  :   Text =>     _id(Board Oid)
        02.title                     :   Text =>     제목
        03.contents                  :   Text =>     문의


/* POST :  문의 또는 식당요청 게시판 답변 */
/boardAnswer
    Req.body.Parameter
        01.Board_Id                  :   Text =>     _id(Board Oid)
        02.answer                    :   Text =>     답변



/* POST : 관리자 공지사항 등록 : 이걸로 DB를 먼저 만들어야 연결이 가능하다 Robomomgo에서 생성하면 nodejs 서버에서 연결이 안됨*/
/managerNoticeInit
    Req.body.Parameter
        01.division                  :   Text =>     0:일반 사용자 관리자 공지 , 1: 사업자 사용자 관리자 공지
        02.text                      :   Text =>     공지 사항


/********************************  삭제  ***********************************/

/* DELETE : 식단 삭제 */
DELETE /mealDel
    Req.query.Parameter
        01.meal_Id                   :   Text =>     _id(Meal Oid)


/* DELETE : 식당 항목 (Group) 삭제  */
/restaurantGroupDel
    Req.query.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.group                     :   Text =>     location,division,stapleFood,soup,sideDish,dessert
        03.text                      :   Text =>     입력 값
                                                     -location     : 구내식당,학생식당 등 
                                                     -division     : 사진식단,('아침', '점심', '저녁')이 포함함
                                                     -stapleFood   : 주식(밥,면)
                                                     -soup         : 국
                                                     -sideDish     : 반찬
                                                     -dessert      : 없음(필수) 후식
                                                     *각 항목에 기본적으로 1가지는 있도록 클라이언트에서 Check한다.


/* DELETE :  문의 또는 식당요청 게시판 삭제 */
/boardDel
    Req.query.Parameter
        01.Board_Id                  :   Text =>     _id(Board Oid)


