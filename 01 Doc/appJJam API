REST API Reference

Endpoint: http://127.0.0.1:3000/

/********************************  찾기  ***********************************/



관심 식당 찾기
POST /restaurantSearch
    Req.Body.Parameter
        01.searchText                :   Text =>     검색어 (주소 & 상호)

식당 인증 & 공지사항
POST /restaurantInfo
    Req.Body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)


식단 조회
POST /mealSearch
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.segmentedId               :   Text =>     오늘 식단(0):오늘 만   
                                                     계회 식단(1):오늘 이후  
                                                     과거 식단(2):오늘 이전 

식당 category 항목(Group) 조회
POST /restaurantGroup
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.group                     :   Text =>     '' :  전체 목록 
                                                     -location     : 구내식당,학생식당 등 
                                                     -division     : 사진식단,('아침', '점심', '저녁')이 포함함
                                                     -stapleFood   : 주식(밥,면)
                                                     -soup         : 국
                                                     -sideDish     : 반찬
                                                     -dessert      : 없음(필수) 후식



로그인
POST /restaurantLogin
    Req.body.Parameter
        01.id                       :   Text =>     id(사용자 입력 ID)
        02.password                 :   Text =>     패스워스(hash: sha-256 digest(Hex)



/********************************  등록  ***********************************/

회원 가입
POST /restaurantSignUp
    Req.Body.Parameter
        01.id                        :   Text =>     id(사용자 입력 ID)
        02.password                  :   Text =>     비밀번호(hash: sha-256 digest(Hex)
        03.businessNumber            :   Text =>     사업자 번호
        04.companyName               :   Text =>     상호
        05.address                   :   Text =>     주소
        06.contactNumber             :   Text =>     연락처
        07.representative            :   Text =>     대표자
        08.businessLicenseImage      :   File =>     사업자 등록증 사진 (600 x 600 사이즈)
      =>certification   : 서버에서 처리 'n'
      =>notice          : 서버에서 처리 '공지사항'

회원 수정
POST /restaurantEdit
    Req.Body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.password                  :   Text =>     비밀번호(hash: sha-256 digest(Hex)
                                                     암호를 수정하고자 할때(별도 인증 없음)
        03.businessNumber            :   Text =>     사업자 번호
        04.companyName               :   Text =>     상호
        05.address                   :   Text =>     주소
        06.contactNumber             :   Text =>     연락처
        07.representative            :   Text =>     대표자
        08.editImage                 :   Text =>     기본 이미지 : "NoImageFound.jpg" 가 들어오면 기존 이미지 삭제
                                                     *기존에 이미지가 등록되어 있는 경루 "NoImageFound.jpg" 시 파일 삭제 처리
        09.businessLicenseImage      :   File =>     사업자 등록증 사진 (600 x 600 사이즈)
      =>id              : 변경 불가
      =>certification   : 서버에서 처리 'n'
      =>notice          : 서버에서 처리 '공지사항'



식단 등록
POST /mealWrite
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.mealDate                  :   Text =>     날짜
        03.location                  :   Text =>     위치(기본으로 구내식당, 추후 : 교직원 식당, 학생 식당 등으로 사용)
        03.division                  :   Text =>     구분(기본으로 아침,점심,저녁 / 아침-정식, 아침-간편식 등으로 사용 
                                                    / 문자열 '아침,점심,저녁' 을 이용하여 sort필드는 서버에서 처리  )
        04.stapleFood                :   Text =>     주식(밥,면)
        05.soup                      :   Text =>     국
        06.sideDish1                 :   Text =>     반찬1
        07.sideDish2                 :   Text =>     반찬2
        08.sideDish3                 :   Text =>     반찬3
        09.sideDish4                 :   Text =>     반찬4
        10.dessert                   :   Text =>     후식
        11.remarks                   :   Text =>     비고
        12.foodImage                 :   File =>     사진 (600 x 600 사이즈)
      =>mealDateLabel   : 날짜 기준으로 서버에서 처리
      =>sort            : division의 문자열 중 '아침,점심,저녁' 을 이용하여 서버에서 처리

식단 수정
POST /mealEdit
    Req.body.Parameter
        01.meal_Id                   :   Text =>     _id(Meal Oid)
        02.mealDate                  :   Text =>     날짜
        03.location                  :   Text =>     위치(기본으로 구내식당, 추후 : 교직원 식당, 학생 식당 등으로 사용)
        03.division                  :   Text =>     구분(기본으로 아침,점심,저녁 / 아침-정식, 아침-간편식 등으로 사용 
                                                     *문자열 '아침,점심,저녁' 을 이용하여 sort필드는 서버에서 처리  )
        04.stapleFood                :   Text =>     주식(밥,면)
        05.soup                      :   Text =>     국
        06.sideDish1                 :   Text =>     반찬1
        07.sideDish2                 :   Text =>     반찬2
        08.sideDish3                 :   Text =>     반찬3
        09.sideDish4                 :   Text =>     반찬4
        10.dessert                   :   Text =>     후식
        11.remarks                   :   Text =>     비고
        12.editImage                 :   Text =>     기본 이미지 : "NoImageFound.jpg" 가 들어오면 기존 이미지 삭제
                                                     *기존에 이미지가 등록되어 있는 경루 "NoImageFound.jpg" 시 파일 삭제 처리
        13.foodImage                 :   File =>     사진 (600 x 600 사이즈)
      =>mealDateLabel   : 날짜 기준으로 서버에서 처리
      =>sort            : division의 문자열 중 '아침,점심,저녁' 을 이용하여 서버에서 처리


식단 삭제 
POST /mealDel
    Req.body.Parameter
        01.meal_Id                   :   Text =>     _id(Meal Oid)


식당 공지사항 수정 
POST /restaurantNoticeEdit
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.notice                    :   Text =>     공지사항


식당  항목(Group) 추가 
POST /restaurantGroupAdd
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.group                     :   Text =>     location,division,stapleFood,soup,sideDish,dessert
        03.text                      :   Text =>     입력 값
                                                     -location     : 구내식당,학생식당 등 
                                                     -division     : 사진식단,('아침', '점심', '저녁')이 포함함
                                                     -stapleFood   : 주식(밥,면)
                                                     -soup         : 국
                                                     -sideDish     : 반찬
                                                     -dessert      : 없음(필수) 후식
                                                     *클라이언트에서 중복을 Check해서 전송한다.
식당 항목(Group) 삭제 
POST /restaurantGroupDel
    Req.body.Parameter
        01.restaurant_Id             :   Text =>     _id(Restaurant Oid)
        02.group                     :   Text =>     location,division,stapleFood,soup,sideDish,dessert
        03.text                      :   Text =>     입력 값
                                                     -location     : 구내식당,학생식당 등 
                                                     -division     : 사진식단,('아침', '점심', '저녁')이 포함함
                                                     -stapleFood   : 주식(밥,면)
                                                     -soup         : 국
                                                     -sideDish     : 반찬
                                                     -dessert      : 없음(필수) 후식
                                                     *각 항목에 기본적으로 1가지는 있도록 클라이언트에서 Check한다.
